const Airpuck={Table:class{constructor(e,o){const t={options:{},fields:[],records:[],endpoint:""},s={ready:!1};e&&(t.options.name=e.name,t.options.baseID=e.baseID,t.options.apiKey=e.apiKey);this.record=class{constructor(){this.fields={},t.fields.forEach(e=>this.fields[e]="")}};const n=class{constructor(){this.endpoint=t.endpoint,this.bearer=t.options.apiKey,this.status=null,this.response=null;const e=(e,o,t,s,n)=>{const i=new XMLHttpRequest;n?i.open(e,this.endpoint+"/"+n):i.open(e,this.endpoint),i.setRequestHeader("Content-Type","application/json"),this.bearer&&i.setRequestHeader("Authorization","Bearer "+this.bearer),i.onload=(e=>{this.status=i.status,200===i.status?(this.response=JSON.parse(i.response),o&&o()):(console.log(i.status),t&&t())}),s?i.send(JSON.stringify(s)):i.send()};this.GET=((o,t)=>e("GET",o,t)),this.POST=((o,t,s)=>e("POST",t,s,o)),this.PATCH=((o,t,s,n)=>e("PATCH",s,n,t,o)),this.PUT=((o,t,s,n)=>e("PUT",s,n,t,o)),this.DELETE=((o,t,s)=>e("DELETE",t,s,null,o))}},i={encodeForURL:e=>encodeURIComponent(e),getEndpoint:(e,o)=>"https://api.airtable.com/v0/"+e+"/"+i.encodeForURL(o),getFields:e=>{if(t.records.length>0){let e=t.records[0];t.records.forEach(o=>{Object.keys(o.fields).length>Object.keys(e.fields).length&&(e=o)}),t.fields=Object.keys(e.fields)}},init:e=>{if(t.options.name&&t.options.baseID&&t.options.apiKey){t.endpoint=i.getEndpoint(t.options.baseID,t.options.name);const o=o=>{i.getFields(),e()};r.pull(o)}else console.log("skip init - options required")},generateAPI:e=>Object.keys(d).forEach(e=>this[e]=d[e])},r={ready:e=>{if(s.ready)e();else{const o={interval:100,max:200,count:0};setTimeout(t=>{o.count++,o.count<o.max?r.ready(e):console.log("timeout: could not initialize table")},o.interval)}},getRecordsByField:(e,o)=>{const s=[];return Object.values(t.records).forEach(t=>{t.fields[e]&&t.fields[e]==o&&s.push(t)}),s},getRecordByID:e=>{let o=null;return Object.values(t.records).forEach(t=>{t.id==e&&(o=t)}),o},pull:e=>{if(t.options.name&&t.options.baseID&&t.options.apiKey){const o=new n;o.GET(s=>{t.records=o.response.records,e&&e()},e=>console.log("pull error"))}else console.log("pull error - options required")},add:(e,o)=>{const s=new n;s.POST(e,e=>{t.records[Object.keys(t.records).length]=s.response,o&&o()},e=>console.log("add error"))},update:(e,o)=>{let s=!1;t.records.forEach(o=>{if(o.id==e.id){s=!0;const o={fields:e.fields};(new n).PATCH(e.id,o,o=>{t.records.forEach(o=>{o.id==e.id&&(o.fields=e.fields)})})}}),s||console.log("no record found for that id")},delete:(e,o)=>{let s=!1;t.records.forEach(i=>{if(i.id==e.id){s=!0,(new n).DELETE(e.id,s=>{t.records.forEach((o,s)=>{o.id==e.id&&t.records.splice(s,1)}),o&&o()})}}),s||console.log("no record found for that id")},attachment:(e,o)=>{const t={};return t.url=e,o&&(t.filename=o),t}},d={pull:e=>r.pull(e),ready:e=>r.ready(e),getRecordsByField:(e,o)=>r.getRecordsByField(e,o),getRecordByID:e=>r.getRecordByID(e),add:(e,o)=>r.add(e,o),update:(e,o)=>r.update(e,o),delete:(e,o)=>r.delete(e,o),attachment:(e,o)=>r.attachment(e,o),records:e=>t.records,fields:e=>t.fields,endpoint:e=>t.endpoint,options:e=>t.options};i.generateAPI(),i.init(e=>{s.ready=!0,o&&o()})}}};